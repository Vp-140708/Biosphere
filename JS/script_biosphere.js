document.addEventListener("DOMContentLoaded", function () {
    const faqBlocks = document.querySelectorAll(".faq-block");

    faqBlocks.forEach(block => {
        block.addEventListener("click", function () {
            this.classList.toggle("active");
            const answer = this.querySelector(".faq-answer");
            if (this.classList.contains("active")) {
                answer.style.maxHeight = answer.scrollHeight + "px";
            } else {
                answer.style.maxHeight = null;
            }
        });
    });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
const themeSwitcher = document.getElementById('theme-switcher');

// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
        document.body.classList.add(savedTheme);
        themeSwitcher.textContent = savedTheme === 'dark-theme' ? 'üåö' : 'üåû';
    }
});

themeSwitcher.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    const currentTheme = document.body.classList.contains('dark-theme') ? 'dark-theme' : 'light-theme';
    themeSwitcher.textContent = currentTheme === 'dark-theme' ? 'üåö' : 'üåû';
    localStorage.setItem('theme', currentTheme);
});

const blocksWrapper = document.querySelector(".blocks-wrapper");
const blocks = document.querySelectorAll(".block-item");
const dots = document.querySelectorAll('.dot');
let currentIndex = 0;
let touchStartX = 0;
let touchEndX = 0;
const threshold = 75;

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ—á–µ–∫
function updateDots(index) {
    dots.forEach((dot, i) => {
        if (i === index) {
            dot.style.backgroundColor = '#000'; // –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—á–∫–∞
            dot.style.transform = 'scale(1.3)';
        } else {
            dot.style.backgroundColor = '#ccc'; // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏
            dot.style.transform = 'scale(1)';
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π/–ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
function goToSlide(index) {
    // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
    if (index < 0) {
        currentIndex = blocks.length - 1;
    } else if (index >= blocks.length) {
        currentIndex = 0;
    } else {
        currentIndex = index;
    }

    blocksWrapper.scrollTo({
        left: blocks[currentIndex].offsetLeft - 10,
        behavior: "smooth"
    });

    updateDots(currentIndex); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
}

// –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–≤–∞–π–ø–∞
blocksWrapper.addEventListener("touchstart", function (event) {
    touchStartX = event.changedTouches[0].screenX;
});

blocksWrapper.addEventListener("touchmove", function (event) {
    touchEndX = event.changedTouches[0].screenX;
});

blocksWrapper.addEventListener("touchend", function () {
    const swipeDistance = touchEndX - touchStartX;

    if (Math.abs(swipeDistance) > threshold) {
        if (swipeDistance > 0) {
            goToSlide(currentIndex - 1);
        } else {
            goToSlide(currentIndex + 1);
        }
    }
});

// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—á–µ–∫
updateDots(currentIndex);

// –•–∞–º–±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
const hamburgerMenu = document.querySelector('.hamburger-menu');
const dropdown = document.querySelector('.dropdown');

hamburgerMenu.addEventListener('click', () => {
    dropdown.classList.toggle('active');
});

